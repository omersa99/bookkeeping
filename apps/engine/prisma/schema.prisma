datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt  DateTime @default(now())
  entities   Entity?  @relation(fields: [entitiesId], references: [id])
  entitiesId String?  @unique
  firstName  String?
  id         String   @id @default(cuid())
  lastName   String?
  password   String
  roles      Json
  updatedAt  DateTime @updatedAt
  username   String   @unique
}

model Transaction {
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  amount    String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  journal   Journal? @relation(fields: [journalId], references: [id])
  journalId String?
  updatedAt DateTime @updatedAt
}

model Journal {
  createdAt    DateTime      @default(now())
  id           String        @id @default(cuid())
  ledger       Ledger?       @relation(fields: [ledgerId], references: [id])
  ledgerId     String?
  transactions Transaction[]
  updatedAt    DateTime      @updatedAt
}

model Ledger {
  createdAt DateTime  @default(now())
  entity    Entity?   @relation(fields: [entityId], references: [id])
  entityId  String?
  id        String    @id @default(cuid())
  journals  Journal[]
  name      String?
  updatedAt DateTime  @updatedAt
}

model Account {
  balanceType    String?
  chartOfAccount ChartOfAccount[]
  code           String?
  createdAt      DateTime         @default(now())
  id             String           @id @default(cuid())
  name           String?
  role           String?
  transactions   Transaction[]
  updatedAt      DateTime         @updatedAt
}

model Entity {
  chartOfAccounts   ChartOfAccount? @relation(fields: [chartOfAccountsId], references: [id])
  chartOfAccountsId String?         @unique
  createdAt         DateTime        @default(now())
  id                String          @id @default(cuid())
  ledgers           Ledger[]
  name              String?
  updatedAt         DateTime        @updatedAt
  user              User?
}

model ChartOfAccount {
  accounts  Account[]
  createdAt DateTime  @default(now())
  entity    Entity?   @relation(fields: [entityId], references: [id])
  entityId  String?   @unique
  id        String    @id @default(cuid())
  updatedAt DateTime  @updatedAt
}

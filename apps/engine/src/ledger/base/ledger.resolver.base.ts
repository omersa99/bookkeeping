/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLedgerArgs } from "./CreateLedgerArgs";
import { UpdateLedgerArgs } from "./UpdateLedgerArgs";
import { DeleteLedgerArgs } from "./DeleteLedgerArgs";
import { LedgerCountArgs } from "./LedgerCountArgs";
import { LedgerFindManyArgs } from "./LedgerFindManyArgs";
import { LedgerFindUniqueArgs } from "./LedgerFindUniqueArgs";
import { Ledger } from "./Ledger";
import { JournalFindManyArgs } from "../../journal/base/JournalFindManyArgs";
import { Journal } from "../../journal/base/Journal";
import { Entity } from "../../entity/base/Entity";
import { InvoiceModel } from "../../invoiceModel/base/InvoiceModel";
import { LedgerService } from "../ledger.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Ledger)
export class LedgerResolverBase {
  constructor(
    protected readonly service: LedgerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ledger",
    action: "read",
    possession: "any",
  })
  async _ledgersMeta(
    @graphql.Args() args: LedgerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ledger])
  @nestAccessControl.UseRoles({
    resource: "Ledger",
    action: "read",
    possession: "any",
  })
  async ledgers(@graphql.Args() args: LedgerFindManyArgs): Promise<Ledger[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ledger, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ledger",
    action: "read",
    possession: "own",
  })
  async ledger(
    @graphql.Args() args: LedgerFindUniqueArgs
  ): Promise<Ledger | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ledger)
  @nestAccessControl.UseRoles({
    resource: "Ledger",
    action: "create",
    possession: "any",
  })
  async createLedger(@graphql.Args() args: CreateLedgerArgs): Promise<Ledger> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        entity: args.data.entity
          ? {
              connect: args.data.entity,
            }
          : undefined,

        invoiceModels: args.data.invoiceModels
          ? {
              connect: args.data.invoiceModels,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ledger)
  @nestAccessControl.UseRoles({
    resource: "Ledger",
    action: "update",
    possession: "any",
  })
  async updateLedger(
    @graphql.Args() args: UpdateLedgerArgs
  ): Promise<Ledger | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          entity: args.data.entity
            ? {
                connect: args.data.entity,
              }
            : undefined,

          invoiceModels: args.data.invoiceModels
            ? {
                connect: args.data.invoiceModels,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ledger)
  @nestAccessControl.UseRoles({
    resource: "Ledger",
    action: "delete",
    possession: "any",
  })
  async deleteLedger(
    @graphql.Args() args: DeleteLedgerArgs
  ): Promise<Ledger | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Journal], { name: "journals" })
  @nestAccessControl.UseRoles({
    resource: "Journal",
    action: "read",
    possession: "any",
  })
  async resolveFieldJournals(
    @graphql.Parent() parent: Ledger,
    @graphql.Args() args: JournalFindManyArgs
  ): Promise<Journal[]> {
    const results = await this.service.findJournals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Entity, {
    nullable: true,
    name: "entity",
  })
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "read",
    possession: "any",
  })
  async resolveFieldEntity(
    @graphql.Parent() parent: Ledger
  ): Promise<Entity | null> {
    const result = await this.service.getEntity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InvoiceModel, {
    nullable: true,
    name: "invoiceModels",
  })
  @nestAccessControl.UseRoles({
    resource: "InvoiceModel",
    action: "read",
    possession: "any",
  })
  async resolveFieldInvoiceModels(
    @graphql.Parent() parent: Ledger
  ): Promise<InvoiceModel | null> {
    const result = await this.service.getInvoiceModels(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

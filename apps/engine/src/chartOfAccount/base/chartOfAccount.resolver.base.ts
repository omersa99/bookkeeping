/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateChartOfAccountArgs } from "./CreateChartOfAccountArgs";
import { UpdateChartOfAccountArgs } from "./UpdateChartOfAccountArgs";
import { DeleteChartOfAccountArgs } from "./DeleteChartOfAccountArgs";
import { ChartOfAccountCountArgs } from "./ChartOfAccountCountArgs";
import { ChartOfAccountFindManyArgs } from "./ChartOfAccountFindManyArgs";
import { ChartOfAccountFindUniqueArgs } from "./ChartOfAccountFindUniqueArgs";
import { ChartOfAccount } from "./ChartOfAccount";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { Entity } from "../../entity/base/Entity";
import { ChartOfAccountService } from "../chartOfAccount.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ChartOfAccount)
export class ChartOfAccountResolverBase {
  constructor(
    protected readonly service: ChartOfAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ChartOfAccount",
    action: "read",
    possession: "any",
  })
  async _chartOfAccountsMeta(
    @graphql.Args() args: ChartOfAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ChartOfAccount])
  @nestAccessControl.UseRoles({
    resource: "ChartOfAccount",
    action: "read",
    possession: "any",
  })
  async chartOfAccounts(
    @graphql.Args() args: ChartOfAccountFindManyArgs
  ): Promise<ChartOfAccount[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ChartOfAccount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChartOfAccount",
    action: "read",
    possession: "own",
  })
  async chartOfAccount(
    @graphql.Args() args: ChartOfAccountFindUniqueArgs
  ): Promise<ChartOfAccount | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChartOfAccount)
  @nestAccessControl.UseRoles({
    resource: "ChartOfAccount",
    action: "create",
    possession: "any",
  })
  async createChartOfAccount(
    @graphql.Args() args: CreateChartOfAccountArgs
  ): Promise<ChartOfAccount> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        entity: args.data.entity
          ? {
              connect: args.data.entity,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChartOfAccount)
  @nestAccessControl.UseRoles({
    resource: "ChartOfAccount",
    action: "update",
    possession: "any",
  })
  async updateChartOfAccount(
    @graphql.Args() args: UpdateChartOfAccountArgs
  ): Promise<ChartOfAccount | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          entity: args.data.entity
            ? {
                connect: args.data.entity,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChartOfAccount)
  @nestAccessControl.UseRoles({
    resource: "ChartOfAccount",
    action: "delete",
    possession: "any",
  })
  async deleteChartOfAccount(
    @graphql.Args() args: DeleteChartOfAccountArgs
  ): Promise<ChartOfAccount | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Account], { name: "accounts" })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async resolveFieldAccounts(
    @graphql.Parent() parent: ChartOfAccount,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Entity, {
    nullable: true,
    name: "entity",
  })
  @nestAccessControl.UseRoles({
    resource: "Entity",
    action: "read",
    possession: "any",
  })
  async resolveFieldEntity(
    @graphql.Parent() parent: ChartOfAccount
  ): Promise<Entity | null> {
    const result = await this.service.getEntity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ChartOfAccount } from "../../chartOfAccount/base/ChartOfAccount";
import { ValidateNested, IsOptional, IsDate, IsString } from "class-validator";
import { Type } from "class-transformer";
import { Item } from "../../item/base/Item";
import { ItemTransaction } from "../../itemTransaction/base/ItemTransaction";
import { Ledger } from "../../ledger/base/Ledger";
import { User } from "../../user/base/User";

@ObjectType()
class Entity {
  @ApiProperty({
    required: false,
    type: () => ChartOfAccount,
  })
  @ValidateNested()
  @Type(() => ChartOfAccount)
  @IsOptional()
  coa?: ChartOfAccount | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => Item,
  })
  @ValidateNested()
  @Type(() => Item)
  @IsOptional()
  items?: Item | null;

  @ApiProperty({
    required: false,
    type: () => [ItemTransaction],
  })
  @ValidateNested()
  @Type(() => ItemTransaction)
  @IsOptional()
  itemTransactions?: Array<ItemTransaction>;

  @ApiProperty({
    required: false,
    type: () => [Ledger],
  })
  @ValidateNested()
  @Type(() => Ledger)
  @IsOptional()
  ledgers?: Array<Ledger>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;
}

export { Entity as Entity };

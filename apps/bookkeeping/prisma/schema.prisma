datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime @default(now())
  entity    Entity?
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Entity {
  accrualMethod Boolean?
  createdAt     DateTime @default(now())
  customers     Client[]
  id            String   @id @default(cuid())
  info          Json?
  items         Item[]
  name          String?
  updatedAt     DateTime @updatedAt
  users         User?    @relation(fields: [usersId], references: [id])
  usersId       String?  @unique
}

model Item {
  account        Account? @relation(fields: [accountId], references: [id])
  accountId      String?
  additionalInfo String?
  Amount         String?
  createdAt      DateTime @default(now())
  entity         Entity?  @relation(fields: [entityId], references: [id])
  entityId       String?
  id             String   @id @default(cuid())
  itemRole EnumItemItemRole? @determines whether the ItemModel should be treated as an expense, inventory, service or product.
  itemType       String?
  name           String?
  price          Float?
  updatedAt      DateTime @updatedAt
}

model Transaction {
  account         Account?                        @relation(fields: [accountId], references: [id])
  accountId       String?
  amount          String?
  createdAt       DateTime                        @default(now())
  id              String                          @id @default(cuid())
  transactionType EnumTransactionTransactionType?
  updatedAt       DateTime                        @updatedAt
}

model Account {
  active             Boolean?
  code               String?
  createdAt          DateTime                       @default(now())
  DefaultAccountType EnumAccountDefaultAccountType?
  documents          Document?
  id                 String                         @id @default(cuid())
  items              Item[]
  name               String?
  role               String?
  transactions       Transaction[]
  updatedAt          DateTime                       @updatedAt
}

model Client {
  createdAt    DateTime   @default(now())
  customerName String?
  documents    Document[]
  entity       Entity?    @relation(fields: [entityId], references: [id])
  entityId     String?
  id           String     @id @default(cuid())
  info         Json?
  updatedAt    DateTime   @updatedAt
}

model Meta {
  active       Boolean?
  bankAccount  String?
  category     String?
  createdAt    DateTime             @default(now())
  email        String?
  id           String               @id @default(cuid())
  name         String?
  paymentTerms String?
  paymentType  EnumMetaPaymentType?
  taxId        String?
  updatedAt    DateTime             @updatedAt
}

model Document {
  cashAccount Account?             @relation(fields: [ID], references: [id])
  ID          String?              @unique
  Client      Client?              @relation(fields: [ClientId], references: [id])
  ClientId    String?
  createdAt   DateTime             @default(now())
  docType     EnumDocumentDocType?
  dueDate     DateTime?
  id          String               @id @default(cuid())
  supplier    Supplier?            @relation(fields: [supplierId], references: [id])
  supplierId  String?
  updatedAt   DateTime             @updatedAt
}

model Supplier {
  active    String?
  createdAt DateTime   @default(now())
  documents Document[]
  id        String     @id @default(cuid())
  name      String?
  updatedAt DateTime   @updatedAt
}

enum EnumItemItemRole {
  Expense
  Inventory
  Service
  Product
}

enum EnumTransactionTransactionType {
  Credit
  Debit
}

enum EnumAccountDefaultAccountType {
  Debit
  Credit
}

enum EnumMetaPaymentType {
  WithoutType
  Cash
  CreditCard
}

enum EnumDocumentDocType {
  Invoice
  Receipt
  Bill
}
